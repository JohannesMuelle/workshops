# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Einführung in C
#+AUTHOR:    Jörg Reuter
#+EMAIL:     joerg@reuter.sc
#+DATE:      

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup
#+SETUPFILE: ../workshopPreamble.org

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (load-file "../setupEnvironment.el")
#+end_src

#+name: setupR
#+begin_src R :exports none :tangle no :results silent
  rm(list=ls())
  .First <- function() {
    options(width=70)
    options(useFancyQuotes=FALSE)
    options(show.signif.stars=FALSE)
    options(scipen = 10)
    options(digits = 3)
  }
#+end_src
* Einführung in C
C ist eine Programmiersprace die kompiliert wird. Bei C wird zwischen Sourcecode und dem Binary unterschieden. Der Sourcecode ist das Programm, dass in einem Editor in C geschrieben wird. Es ist von Menschen les- und verstehbar. Durch das kompilieren wird aus dem Sourcecode das Binary erzeugt. Das Binary wird für jede Plattform getrennt erzeugt und ist ausführbar. Der Inhalt des Binaries kann nicht mehr von Menschen gelesen und verstanden werden. Sourcefiles von C-Programmen bekommen die Endung .c.

Wir programmieren einen Mikrocontroller im Unterricht und führen auch ein grösseres Projekt mit dem Mikrokontroller durch. Wir verwenden zum entwickeln der Anwendungen einen Arduino Uno. Die Anwendungen können dann später auf eine deutlich preisgünstigere Plattform mit weniger Energieverbrauch überspielt werden.

Zum Programmieren verwenden wir für den Einstieg die Software von arduino.cc: https://www.arduino.cc/en/Main/Software. Die Software ist kostenlos und für alle gängige Betriebssysteme verfügbar (Windows app, Mac OS X 10.7, Linux 32 bits, Linux 64 bits, Linux ARM). Die Installation ist sehr einfach und selbsterklärend.

Wir brauchen eine Libary um den hier vorwendeten Ansatz von TDD umzusetzen. Dafür besorgen wir uns die Dateien von https://github.com/mmurdoch/arduinounit und binden die Dateien entsprechend der Datei Readme.txt in IDE von oben ein.

Den Arduino verbinden wir per USB mit dem Computer. 

** Aufgabe
Lese bitte folgende Datei durch: http://hems.de/fileadmin/_migrated/content_uploads/Arduino_Tutorial.pdf und baue die Schaltungen mit Hilfe des Steckbretts nach. Es ist nicht schlimm, wenn Du einige Sachen noch nicht verstehst. Die LED sollte aber bei jedem leuchten.

* TDD
TDD (test-driven development) ist eine Methode um grosse Aufgaben in kleine Funktionsbausteine zu zerlegen und Hilft, dass der Sourcecode zu jedem Zeitpunkt möglichst fehlerfrei ist.
TDD (https://de.wikipedia.org/wiki/Testgetriebene_Entwicklung) beinhaltet einen 4-stufigen Prozesse:

1.) Test definieren (Was soll das Programm machen?)
2.) Der Test fällt durch (rot), weil noch kein Programm geschrieben wurde, das den Test erfüllen könnte.
3.) Test wird bestanden (grün) weil unser Programm den Test gerade so erfüllt.
4.) Das Programm wird verbessert.

#+begin_src
#include <ArduinoUnit.h>

test(Erster_Test) 
{
  Serial.println("Muss noch programmiert werden!!!!");
}

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  Test::run();
}
#+end_src

Das Programm ist der minimale Aufbau einer funktionsfähigen Testumgebung. Es besteht aus 3 Teilen:

- test
- setup
- loop

Die Funktion "test" beinhaltet einen Test der nur die Nachricht ausgibt: "Muss noch programmiert werden!!!!". Die Funktion setup richtet die serielle Verbindunge ein, da der Arduino keinen Bildschirm hat. Die Ausgabe erfolgt auf der seriellen Konsole (Werkzeug/Serieller Monitor in der IDE). Die Funktion loop startet den Test.

Ausgabe auf der der seriellen Konsole:

Muss noch programmiert werden!!!!
Test Erster_Test passed.
Test summary: 1 passed, 0 failed, and 0 skipped, out of 1 test(s)

Da noch keine Testbedingungen festgelegt worden sind, kann der Test nicht fehlschlagen. 

** Der erste Test

Ein Test beginnt immer mit einer Bedingung, an der wir erkennen ob unser Programm wie gewünscht arbeitet. Wir implementieren zum Testen die Bedingung 1==2. Wir erwarten eine wahre Antwort im Programm (natürlich wissen wir, dass dies nicht richtig ist). Bedingungen enthalten immer das Schlüselwort "assert" und zum testen eines logischen Ausdrucks: assertTrue(arg).

#+begin_src
#include <ArduinoUnit.h>

test(Erster_Test) 
{
  assertTrue(1==2);
}

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  Test::run();
}
#+end_src

Ausgabe wie erwartet:

Assertion failed: (1==2=0) == (true=1), file /home/jorg/Arduino/test_tdd/test_unity/test_unity.ino, line 5.
Test Erster_Test failed.
Test summary: 0 passed, 1 failed, and 0 skipped, out of 1 test(s).

** Aufgabe

Bitte korrigiere den Test in der Art, dass er bestanden wird.

** Erweiterung der Funktion "test"

Bitte übertrage das folgende Programm und führe es aus:

#+begin_src
#include <ArduinoUnit.h>

test(Erster_Test) 
{
  assertTrue(2==2);
  assertTrue(1==2);
}

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  Test::run();
}
#+end_src

Ausgabe:
Assertion failed: (1==2=0) == (true=1), file /home/jorg/Arduino/test_tdd/test_unity/test_unity.ino, line 6.
Test Erster_Test failed.
Test summary: 0 passed, 1 failed, and 0 skipped, out of 1 test(s).

Die Ausgabe zeigt uns genau an, welcher Test in welcher Zeile warum fehlgeschlagen ist.

Die Gleichheit zweier Zahlen kann mit Hilfer der Funktion assertEqual(x,y) auch kürzer geschrieben werden:

#+begin_src
#include <ArduinoUnit.h>

test(Erster_Test) 
{
  assertEqual(2,2);
  assertEqual(1,2);
}

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  Test::run();
}
#+end_src

Und die erwartete Ausgabe:

Assertion failed: (1=1) == (2=2), file /home/jorg/Arduino/test_tdd/test_unity/test_unity.ino, line 6.
Test Erster_Test failed.
Test summary: 0 passed, 1 failed, and 0 skipped, out of 1 test(s).

Wir können die Bedingungen auch in zwei Testfälle aufteilen um eine bessere Information zu bekomen:

#+begin_src
#include <ArduinoUnit.h>

test(Erster_Test) 
{
  assertEqual(2,2);
}

test(Zweiter_Test)
{
  assertEqual(1,2);
}

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  Test::run();
}
#+end_src

Ausgabe:

Test Erster_Test passed.
Assertion failed: (1=1) == (2=2), file /home/jorg/Arduino/test_tdd/test_unity/test_unity.ino, line 10.
Test Zweiter_Test failed.
Test summary: 1 passed, 1 failed, and 0 skipped, out of 2 test(s).

Wir sehen an der Ausgabe, dass ein Test rot wurde: "Zweiter_Test failed"

** Aufgabe

Lese bitte die Datei Readme.md durch (aus dem Git-Repository von AndroidUnit). Dort sind alle Testfunktionen aufgelistet und erklärt.

























** Aufabe

1.) Lasse Dir den Exit-Code der letzten Ausführung des C-Programms ausgeben.
2.) Verändere das Programm so, dass eine "1" zurückgegeben wird. Überprüfe die Ausgabe.
3.) Lösche die Zeile mit dem Befehl "return" komplett. gibt es ein Kompilierungsfehler? Welcher Exit-Code wird zurück gegeben?



 
* TDD
TDD ist eine wundervolle Methode um Code zu schreiben. TDD basiert darauf, dass zuerst klar und abprüfbar definiert wird, welches Verhalten dieses Programm haben soll. Das Programm an sich wird als eine Blackbox angesehen, die bei bestimmten Eingabewerten bestimmte Ausgabewerte liefert. Die Anforderungen werden in sogenannten Tests definiert. Das bedeutet, dass für jede Anforderung ein Test geschrieben wird, der diese Anforderung abprüft. Dieses Verfahren hilft dabei:

- das Problem klar zu beschreiben
- Bei Veränderungen am Code sofort zuerkenen ist, ob sich das Verhalten des Programms ändert.

Computer sind heute so schnell, dass die Test meistens im Hintergrund ablaufen, ohne das der Programmierer dies mitbekommt. Bei grossen Projekten werden die Tests über Nacht durchgeführt.

Als erstes schlagen alle Tests fehl, weil noch kein Code vorhanden ist. Der erste Schritt ist es, dass Problem irgendwie so zu lösen, so das der Test keinen Fehler ausgibt. Danach kann der Code beliebig optimiert werden, ohne das die Funktion nach aussen veränder wird.

Um TDD einfach mit C anzuwenden wird ein Framework verwendet. Dies liegt einfach daran, dass C eine sehr alte Programmiersprache ist (fast 50 Jahre: https://de.wikipedia.org/wiki/C_(Programmiersprache)). Im laufe der Zeit ändern sich Sachen aber bei Embedded Systems (eingebettet Systeme) ist die Zeit auf Grund der widrigen Umständen wie hoher Kostendruck, sehr energiesparendes Design, sehr kleine Abmessungen und daher sehr schwache Auslegung von Prozessor und Speicher etc. ist die Entwicklung der Programmiersprache nicht auf dem aktuellen Stand. 

Gerade dieses stehen bleiben in der Entwicklung läst C als nichtgeeignet erscheinen, um eine Programmiersprache zu lernen. Auf der anderen Seite hat C eine herausragende Bedeutung im Segment der IoT und der kelinen Geräten. Gerade da wo bei der Leistung um jedes Milliwatt gekämpft wird, weil die Geräte oft 24h am Tag und 365 Tage im Jahr im Betrieb sind. Wo die Software mit Prozessoren zurecht kommen muss, die noch im einstelligen MHZ-Bereich ihren Dienst tun und mit KBytes statt GBytes an RAM wahre Wunder vollbringen sollen. In Bereichen, indenen die Geräte möglichst verschwinden sollen und sich keiner dafür interessiert wie Funksteckdosen, Babyphone, WebCam,Armbanduhr, Radio, Waschmaschine, Auto, Heizungsregelung etc. gesteuert werden. Aber gerade diese Durchsetzung der Umgebung einer modernen Gesellschaft mit den kleinen Helfern macht sie zahlenmässig bedeutend. So bedeutend, dass man sich als angehender Fachinformatiker oder Systemelektroniker zumindest ein paar Eigenschaften der Programmiersprache zu eigen gemacht haben sollte.





























** Unity
Wir brauchen als erstes einen Compiler mit Hilfswerkzeugen:

#+begin_src
apt install gcc make
#+end_src

Wir beginnen TDD mit dem Framework Unity (http://www.throwtheswitch.org/unity) 
Erster Schritt ist das Klonen eines Github-Repositories:

#+begin_src
git clone https://github.com/ThrowTheSwitch/Unity.git
#+end_sc

Im Verzeichnis Unity liegen unter src die benötigten Dateien. Die anderen Dateien sind nur schückendes Beiwerk.

Wir erzeugen als nächstes ein Verzeichnis im gleichen Pfad, indem wir das git clone - Kommando abgesetzt haben. Der Name des Verzeichnisses ist beliebig, wir nennen es im Text das Projektverzeichnis.

In diesem Verzeichnis klonen wir auch das Repository mit den Lernmaterialien:

#+begin_src
https://github.com/joergre/workshops.git
#+end_src

In dem neuen Verzeichnis workshops findet Ihr unter LF6/unity/ ein makfile. Dieses kopiert Ihr bitte in Euren Projektordner:

#+begin_src
cp makefile ../../../Projekt
#+end_src




* Cleanup							   :noexport:
#+name: cleanitallup
#+begin_src R 
  rm(list=ls())
#+end_src

#+RESULTS: cleanitallup
#+begin_example
> rm(list=ls())
> 
#+end_example

* Ideen :nonexport

