# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Einführung in Python
#+AUTHOR:    Jörg Reuter
#+EMAIL:     joerg@reuter.sc
#+DATE:      

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup
#+SETUPFILE: ../workshopPreamble.org

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (load-file "../setupEnvironment.el")
#+end_src

#+name: setupR
#+begin_src R :exports none :tangle no :results silent
  rm(list=ls())
  .First <- function() {
    options(width=70)
    options(useFancyQuotes=FALSE)
    options(show.signif.stars=FALSE)
    options(scipen = 10)
    options(digits = 3)
  }
#+end_src
* TDD
Beim programmieren stellt sich immer die Farge, wie programmiere ich zuverlässigen Code der sich einfach warten lässt. Dazu hat sich das Verfahren TDD bewährt. TDD steht für test-driven development oder auf deutsch Testgetriebene Entwicklung (siehe auch https://de.wikipedia.org/wiki/Testgetriebene_Entwicklung). Standardwerke sind: The Art of Unit Testing von Roy Osherove und Clean Code von Robert C. Martin. Beide Bücher gibt es auch in deutscher Übersetzung: https://www.amazon.de/dp/B00T77J9MW/ref=cm_sw_r_tw_dp_x_hHldybT7ZWRN2 und https://www.amazon.de/dp/B00MIF2ANK/ref=cm_sw_r_tw_dp_x_SFldybHWXJWJS. Das Prinzip besteht darin, zuerst eine Testfunktion zu erstellen, die dann die Funktion oder das Programm mit entsprechenden Paramtern aufruft. Das Ergbnis wird mit dem erwarteten Wert verglichen. Unterscheidet sich der erwartete Wert vom Rückgabewert, wird eine Fehlermeldung ausgegeben. Die Tests laufen normalerweise sehr schnell und automatisch durch. Als Richtwert kann man von 50 Test ausgehen die durchlaufen können vom Tastendruck zum speichern und Wechseln auf die Maus bzw. nächsten Tastendruck um weiter zu programmieren.

** TDD am Beispiel
Der Ansatz von TDD ist am besten an Hand eines Beispiels zu verstehen. Als Aufgabe nehmen wir "Conways Spiel des Lebens": https://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens#Die_Spielregeln. Unser Programmteil soll Anhand der Anzahl der Nachbarn und des Zustandes der Zelle feststellen, ob die Zelle am Leben bleibt, neu geboren wird oder stirbt. 
Wir fangen mit der ersten Regel an:

- Eine tote Zelle mit genau drei lebenden Nachbarn wird in der Folgegeneration neu geboren.

Wir fangen jetzt nicht an, dass Programm zu programmieren, sondern schreiben zuerst(!) einen Test. TDD besagt, zuerst einen Test schreiben und erst beim fehlschlagen eines Test schreiben wir ein Programm.
Unser Programm schreiben wir in die Datei SdL.py (SdL für Spiel des Lebens) und unser Testprogramm schreiben wir in die Datei SdL_Test.py.

Datei SdL.py:
#+name: SdL.pyv1
#+begin_src python :export both
def nextGeneration(zelle, nachbarn):
    pass
#+end_src

Datei SdL_Test.py an:

#+name: SdL_Test.pyv1
#+begin_src python :export both
import unittest
# Import der Funktion 
from SdL import nextGeneration
# Import der zu testenden Funktion
class GameOfLifeTests( unittest.TestCase):
    def test_lebende_zelle_mit_3_nachbarn_wird_lebendig(self):
# Name der Testfunktion        
        self.assertEquals( 'lebt', nextGeneration( zelle='tot', nachbarn = 3 ) )
# der Test mit dem Erwartungwert 'lebt' bei Übergabe der Werte Zelle='lebt' und nachbarn='2'

if __name__ == '__main__':
    unittest.main()
#+end_src

Die Ausgabe von SdL_Test.py:

#+begin_src
======================================================================
FAIL: test_lebende_zelle_mit_2_nachbarn_bleibt_lebendig (__main__.GameOfLifeTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ubuntu/workspace/SdL_Test.py", line 8, in test_lebende_zelle_mit_2_nachbarn_bleibt_lebendig
    self.assertEqual( 'lebt', nextGeneration( zelle='lebt', nachbarn = 2 ) )
AssertionError: 'lebt' != None

----------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
#+end_src

Da die Funktion nextGeneration keinen Rückgabewert hat, kommt es zu einer (erwarteten) Fehlermeldung bei der Abarbeitung des Test: 
'lebt' != None

Wir passen die Funktion so an, dass der erwartete Wert zurückgegeben wird:

Datei SdL.py:

#+name: SdL.pyv2
#+begin_src python :export both
def nextGeneration(zelle, nachbarn):
    return('lebt')
#+end_src

Der Test wird erfüllt und gibt ein OK zurück:

#+begin_src
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
#+end_src

Wenden wir uns jetzt der zweiten Bedingung zu:

- Lebende Zellen mit weniger als zwei lebenden Nachbarn sterben in der Folgegeneration an Einsamkeit.

Als erstes implementieren wir wieder einen Test. Erst ein fehlgeschlagener Test motiviert uns, weiter an dem Code zu arbeiten.

Die Datei SdL_Test.py:

#+name: SdL_Test.pyv3
#+begin_src python :export both
# -*- coding: utf-8 -*-
import unittest
# Import der Funktion 
from SdL import nextGeneration
# Import der zu testenden Funktion
class GameOfLifeTests( unittest.TestCase):
    def test_lebende_zelle_mit_2_nachbarn_bleibt_lebendig(self):
# Name der Testfunktion        
        self.assertEqual( 'lebt', nextGeneration( zelle='lebt', nachbarn = 2 ) )
# der Test mit dem Erwartungwert 'lebt' bei Übergabe der Werte Zelle='lebt' und nachbarn='2'
    def test_lebende_zelle_mit_0_nachbarn_stirbt(self):
        self.assertEquals( 'tot', nextGeneration( zelle='lebt', nachbarn = 0 ) )
    def test_lebende_zelle_mit_1_nachbarn_stirbt(self):
        self.assertEquals( 'tot', nextGeneration( zelle='lebt', nachbarn = 1 ) )
if __name__ == '__main__':
    unittest.main()
#+end_src python

Die Ausgabe des Tests:

#+begin_src
======================================================================
FAIL: test_lebende_zelle_mit_0_nachbarn_stirbt (__main__.GameOfLifeTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ubuntu/workspace/SdL_Test.py", line 12, in test_lebende_zelle_mit_0_nachbarn_stirbt
    self.assertEquals( 'tot', nextGeneration( zelle='lebt', nachbarn = 0 ) )
AssertionError: 'tot' != 'lebt'

======================================================================
FAIL: test_lebende_zelle_mit_1_nachbarn_stirbt (__main__.GameOfLifeTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/ubuntu/workspace/SdL_Test.py", line 14, in test_lebende_zelle_mit_1_nachbarn_stirbt
    self.assertEquals( 'tot', nextGeneration( zelle='lebt', nachbarn = 1 ) )
AssertionError: 'tot' != 'lebt'

----------------------------------------------------------------------
Ran 3 tests in 0.001s

FAILED (failures=2)
#+end_src

Nach dem fehlgeschlagenen Test haben wir die Motivation die wir brauchen! Wir passen unser Pythonprogramm entsprechend an:







* Introduction
** Scanner
*** Erster Verbindungsaufbau
Rechner werden in einem Netzwerk über Socket eindeutig identifiziert. Über Ports werden bestimmte Dienste bei einem Server angesprochen, z.B. Port 80 ist standardmäßig eine unverschlüsselte Verbindung zu einem Webserver. Beim Verbindngsaufbau wird auf dem Client-Computer ein Port größer 1024 geöffnet und empfängt die vom Server geschickten Daten (https://de.wikipedia.org/wiki/Transmission_Control_Protocol). Die Kombination aus Client(IP/Port)-Server(IP/Port) bezeichnet die Verbindung eindeutig. Dies ermöglicht z.B. das bei öffnen der gleichen Webseite in verschiedenen Tabs eines Browser die Daten eindeutig jedem Tab zugeordnet werden können. Diese Kombination aus Client(IP/Port)-Server(IP/Port) bezeichnet man als Socket und sorgt dafür, dass der Kommunikationskanal eindeutig angesprochen werden kann.
Um in Python die Kommunilkation über Sockets abwickeln zu können, muss das Modul Socket importiert werden.

#+name: Socket1 
#+begin_src python :export both
import socket #Import Socket  
socket.setdefaulttimeout(2) # Warte 2 Sekunden aus Antwort 
s = socket.socket() # Speichere den Handler der Verbindung in s
s.connect(("ochristen.de",21)) # Verbinde Dich mit dem Server ochristen.de auf Port 22    
banner = s.recv(1024) # Empfange die Willkommensnachricht des FTp-Servers und seichere maximal 1024 Byte ab
print(banner) # Gebe die Willkomensnachricht aus
#+end_src    

#+RESULTS: Socket1
#+begin_example
220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 13 of 100 allowed.
220-Local time is now 16:46. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.

#+end_example

#+RESULTS:

*** Fehlerbehandlung
Mit dem Befehlsaufbau

#+name: Fehlerbehandlung
#+begin_src example :export none 
try:
   ........
except:
   ........
#+end_src

Können Fehler abgefangen werden. Der Block unter try wird ausgeführt und bei einem Fehler wird der Block except ausgeführt. Beispielsweise wird unten versucht die Verbindung zum Server ochristen.dk aufzubauen. Da es diesen Server nicht gibt wird die Fehlerbehandlung abgearbeitet und gibt eine Fehlermeldung aus.

#+Name SocketFehlerbehandlung
#+begin_src python :export both

import socket
try:
    socket.setdefaulttimeout(2)
    s = socket.socket()
    #   s.connect(("ochristen.de",21))
    s.connect(("ochristen.dk",21))
    banner = s.recv(1024) # Empfange die Willkommensnachricht des FTp-Servers und seichere maximal 1024 Byte ab
    print(banner) # Gebe die Willkomensnachricht aus
except:
    print ('[-] Error = Timed out')

#+end_src

#+RESULTS:
#+begin_example
[-] Error = Timed out
#+end_example

#+RESULTS: Fehlerbehandlung

Hingeggen wird mit der richtigen Adresse keine Fehlermeldung ausgegeben:

#+Name Socket_Fehlerbehandlung2
#+begin_src python :export both

import socket
try:
    socket.setdefaulttimeout(2)
    s = socket.socket()
    #   s.connect(("ochristen.de",21))
    s.connect(("ochristen.de",21))
    banner = s.recv(1024) # Empfange die Willkommensnachricht des FTp-Servers und seichere maximal 1024 Byte ab
    print(banner) # Gebe die Willkomensnachricht aus
except:
    print ('[-] Error = Timed out')

#+end_src

#+RESULTS:
#+begin_example
220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 12 of 100 allowed.
220-Local time is now 11:26. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.

#+end_example

Manchmal möchte man den Fhlercode Erfahren. Dies kann durch except in einer Variablen übergeben werden. Im folgenden Beispiel lautete die Variable e:

#+Name SocketFehlerbehandlung2
#+begin_src python :export both

import socket
try:
    socket.setdefaulttimeout(2)
    s = socket.socket()
    #   s.connect(("ochristen.de",21))
    s.connect(("strato.de",21))
    banner = s.recv(1024) # Empfange die Willkommensnachricht des FTp-Servers und seichere maximal 1024 Byte ab
    print(banner) # Gebe die Willkomensnachricht aus
except Exception, e:
    print ('[-] Error = '+str(e))

#+end_src

#+RESULTS:
#+begin_example
[-] Error = [Errno 111] Connection refused
#+end_example

*** Funktion definieren
Manchmal ist es sinnvoll häufig gebrauchten Code in Funktionen zusammen zufassen um diesen immer wieder verwenden zu können.
Wir definieren jetzt eine Funktion mit dem Namen Banner. Die Funktion wird mit den Parametern IP und Port aufgerufen und gibt als Antwort entweder die Reaktion des Servers wieder oder bei Feher einen leeren String.

#+Name SocketFunktion
#+begin_src python :export both
import socket
# Funktion 1: Banner. Holt den Banner des FTP-Servers.

def Banner(ip, port):
    try:
        socket.setdefaulttimeout(2)
	s = socket.socket()
	s.connect((ip,port))
	banner = s.recv(1024)
	return banner
    except:
	return
print(Banner('ochristen.de',21))
#+end_src

#+RESULTS:
#+begin_example
220---------- Welcome to Pure-FTPd [privsep] [TLS] ----------
220-You are user number 11 of 100 allowed.
220-Local time is now 12:22. Server port: 21.
220-This is a private system - No anonymous login
220-IPv6 connections are also welcome on this server.
220 You will be disconnected after 15 minutes of inactivity.

#+end_example

Durch den efehl def gefolgt von einem Namen und in Klammern der zu erwarteten Parameter wird eine Funktion definiert. Der aufruf der Funktion erfolgt über Name() wobei die erwarteten Parameter in der Klamer angegeben werden.

Wir programmieren jetzt noch eine zweite Funktion, die überprüft ob der Banner einen bestimmten Rückgabewert hat und wenn ja eine bestimmte Meldung ausgibt. Wenn der Server nicht regiert wird die Meldung 'Kein Dienst ausgeben' und wenn der String nicht enthalten ist aber der Server reagiert wird eine andere Meldung ausgegeben.
#+Name SocketFunktion2
#+begin_src python :export both
import socket
# Funktion 1: Banner. Holt den Banner des FTP-Servers.

def Banner(ip, port):
    try:
        socket.setdefaulttimeout(2)
        s = socket.socket()
        s.connect((ip,port))
        banner = s.recv(1024)
        return banner
    except Exception, e:
        print('[+] Kein FTP-Server auf '+server+' Port 21: '+str(e))
        return

def check(banner):
    if 'Pure-FTPd' in banner:
        print('[-] '+server+' Pure-FTPd ist angreifbar')
    else:
        print('[+] '+server+' FTP Server ist nicht angreifbar')

SERVER = ['ochristen.de', 'strato.de', 'ochristen.dk', 'michael-roth-software.de']
for server in SERVER:
    banner = Banner(server,21) 
    if banner:
         check(banner)
    
#+end_src

#+RESULTS:
#+begin_example
[-] ochristen.de Pure-FTPd ist angreifbar
[+] Kein FTP-Server auf strato.de Port 21: [Errno 111] Connection refused
[+] Kein FTP-Server auf ochristen.dk Port 21: [Errno -2] Name or service not known
[+] michael-roth-software.de FTP Server ist nicht angreifbar
#+end_example

Wir überprüfen in diesem Beispiel 4 Server die in der Liste SERVER abgespeichert sind. Wir rufen die Namen nacheinander über die for-Schleife ab und fürhren dann jeweils die Funktion Banner und check durch und geben dann jeweils das Ergebnis aus. Wir sehen, dass wie werwartet, bei dem Server ochristen,de die Funktion check den gesuchten String findet. Bei strato.de wird der Server gefunden aber kein FTP-Server. Dem gegenüber existiert der Server ochristen.dk nicht und insofern ist der Name nicht bekannt. Und beim Server michael-roth-software.de wird der gesuchte String in der FTP-Ausgabe des Servers nicht gefunden.

**** Darstellung als Pseudocode 

Es gibt verschiedene Formen der Darstellung oder Veranschaulichung eines Programms. Eine Möglichkeit istdie Darstellung in Pseudocode. Gerade vor Beginn des Programierens ist die Darstelung in Pseudocode sinnvoll um sich zu verdeutlichen, welche Funktionen das Programm benötigt. Für Pseudocode gibt es keie feste Form, sondern es soll möglichst nah an der Alltagssprache das Problem beschreiben. Es können Elemente der Zielsprache verwendet werden, muss aber nicht sein. Es können auch Elemente verwendet werden, bei denen die Umsetzung in der jeweiligen Programiersprache noch nicht klar ist.

Ein Beispiel für das obige Programm in Pseudocode:

#+BEGIN_SRC EXAMPLE
Funktion 1:
    Versuche einen stream socket s zu erstellen
        Erfolg:
	    Gebe die Serversignatur zurück
	Misserfolg:
	    Gebe Fehlermeldun aus

Funktion 2:
    Überprüfe Variable auf eine Zeichenkette (String)
        Zeichenkette enthalten:
	    Gebe Meldung aus, dass Server eine Sicherheitslücke hat
	Zeichenkete nicht enthalte:
	    Gebe Medung aus, dass Server in Ordnung ist

Main:
    Solange Liste SERVER Elemente enthält:
        Rufe Funktion 1 auf
	Überprüfe auf Rückgabe
	    Wenn Rückgabewertvorhanden:
	        Rufe Funktion 2 auf
#+END_SRC

**** Darstellung als Programmablaufplan (Flowchart) 

Das gleiche Programm als Programmablaufplan. Weitere Informationen: https://de.wikipedia.org/wiki/Programmablaufplan

#+BEGIN_SRC ditaa :file images/socket_pap.png
                                  /-----------------------------------------\
                                  |                                         |
                                  |                                         |    Nein
+-------------------------------->| Enthält Liste Server noch ein Element?  |-------------+
|	                          |                                         |             |
|                                 |                                         |             |
|	                          |                                {c}      |             | 
|	                          \-----------------------------------------/             |
|                                                      |                                  |
|                                                      | Ja                               |
|                                  /-----------------------------------------\            |
|	                           |                                         |            | 
|    Nein                          |                                         |            |
+<---------------------------------|  Versuche einen Socket zu erstellen.    |            |
|	                           |             Erfolgreich?                |            |                   
|	                           |                                 {c}     |            |    
|	                           |                                         |            |    
|	                           \-----------------------------------------/            |    
|                                                       |                                 |    
|                                                       | Ja                              |    
|    /----------------------\      /-----------------------------------------\            |    
|    |	                    |      |                                         |            |    
|    | Ausgabe: Verwundbar  | Nein |                                         |            |
|<---|	                    |<-----|            Signatur ok?                 |            |           
|    |             {io}     |      |                                         |            |
|    |                      |      |                                         |            |
|    |                      |      |            {c}                          |            |
|    \----------------------/      \-----------------------------------------/            |
|                                                       |                                 |    
|                                                       | Ja                              |    
|                                  /--------------------------------------\               |
|	                           |                                      |               |
|	                           | Ausgabe: Server i. O.                |               |
+<---------------------------------|                                      |               |
                                   |                                      |               |
                                   |                                      |               |
 	                           |               {io}                   |               |
 	                           \--------------------------------------/               |
                                                                                          |
                                                                                          |
                                                                                          |
                                    +-----------------------------\                       |
                                    |                             |                       |
                                    |                             |                       |
                                    |           STOP              |<----------------------+
                                    |                       {o}   |
                                    |                             |
                                    |                             |
                                    +-----------------------------+


#+END_SRC

#+RESULTS:
[[file:images/socket_pap.png]]
P. S.: Wenn Ihr aauch solche Diagramme zeichnen möchtet: https://www.dokuwiki.org/plugin:ditaa und http://ditaa.sourceforge.net/

* Cleanup							   :noexport:
#+name: cleanitallup
#+begin_src R 
  rm(list=ls())
#+end_src

#+RESULTS: cleanitallup
#+begin_example
> rm(list=ls())
> 
#+end_example

* Ideen :nonexport
http://informatik.bildung-rp.de/fileadmin/user_upload/informatik.bildung-rp.de/Weiterbildung/WB_12/WB_XII_5_Sockets_in_Python.pdf
