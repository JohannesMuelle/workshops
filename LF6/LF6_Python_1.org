# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Einführung in Python
#+AUTHOR:    Jörg Reuter
#+EMAIL:     joerg@reuter.sc
#+DATE:      

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup

#+SETUPFILE: ../workshopPreamble.org

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (load-file "../setupEnvironment.el")
#+end_src

#+name: setupR
#+begin_src R :exports none :tangle no :results silent
  rm(list=ls())
  .First <- function() {
    options(width=70)
    options(useFancyQuotes=FALSE)
    options(show.signif.stars=FALSE)
    options(scipen = 10)
    options(digits = 3)
  }
#+end_src



* Einleitung

Programmieren kann eine sehr frustrierende Angelegenheit sein mit vielen Problemen und Hindernissen. Um die Probleme und Hindernisse klein zu halten, sind alle Aufgaben in Partnerarbeit zu erledigen. Untersuchungen ergaben, dass das bestehen von Abschlussprüfungen erheblich besser ausfällt, wenn die Schüler konsequent in Partnerarbeit Aufgaben lösten (Teague, Donna und Paul Roe. Learning to Program. From Pear-Shaped to  Pairs. In: CSEDU 2009. Proceedings of the First International Conference on Computer Supported Education. Volume 2. Lissabon: INSTICC, 2009.)

** UML-Diagrammme

UML-Diagramme werden eingesetzt um eine Software zu modellieren und sind nach ISO/IEC 19505 standardisiert. UML unterteilt sich hierbei in sieben Strukturdigramme und sieben Verhaltensdiagramme, sieh hierzu http://de.wikipedia.org/wiki/Unified_Modeling_Language.

Die große Anzahl von möglichen Diagrammen verwirrt bei dem ersten Kontakt mit UML. Welches Strukturdiagramm und welches Verhaltensdiagramm setze ich jetzt ein?

Um die Erstellung eines UML-Diagramms zu vereinfachen, gibt es eine große Anzahl von Programmen. Einen schönen Vergleich verschiedener Programme zur Erstellung von UML-Diagramme wurde im Februar 2012 auf der Internetseite http://www.pro-linux.de/artikel/2/1556/1,seite-1.html veröffentlicht. Hier kristallisieren sich zwei empfehlenswerte Programme heraus: Dia und Visual Paradigm. Dia ist Opensource und kann bei den meisten Distributionen über den Paket-Manager installiert werden. http://www.visual-paradigm.com/download/vpuml.jsp ist für den Einsatz in Bildungseinrichtungen kostenlos, aber nicht Opensource.



* Hello World
Wir rufen die Python-Konsole auf mit dem Befehl

#+name: HelloWorld
#+begin_src bash :exports both
python
#+end_src

und geben ein:

#+name: HelloWorld
#+begin_src python :exports both
print("Hallo Welt")     #Hello World ausgeben
#+end_src

#+RESULTS:
#+begin_example
Hallo Welt
#+end_example

Anmerkung:
Text nach dem '#'-Zeichen kommt ist ein Kommentar.
Wir verwenden zum programmieren eine kostenlose virtuelle Maschine von https://c9.io (siehe auch https://en.wikipedia.org/wiki/Cloud9_IDE)

* Programmieren

Programmieren bedeutet, Anweisungen in einer bestimmten Sprache zu schreiben.

** Aufgabe 2.1:

Beschreibe in kurzen Anweisungen den Weg von der Ferdinand-Braun-Schule zum Klinikum Fulda (http://goo.gl/ypP053).  Schreibe jede Anweisung in eine getrennte Zeile und setze am Ende kein Satzzeichen.

** Bedingte Anweisung

#+name: if-Anweisung
#+begin_example
if (Bedingung):
    Anweisungen, die ausgeführt werden, wenn die Bedingung zutrifft;
else:
    Anweisungen, die ausgeführt werden, wenn die Bedingung falsch ist;
#+end_example   

** Aufgabe 2.2

Verwende die Lösung von Aufgabe 2.1. Füge jetzt nach obigen Schema einen Abschnitte ein, der eine alternative Routenführung bei Sperrung oder Stau in der Dr.-Dietz-Straße vorsieht.

** While-/ Until-Schleife

#+name: While
#+begin_example
while (Bedingung):
   Anweisung
#+end_example

Beispiel:

#+name: HelloWorld
#+begin_src python :exports both                                                                                         i=0                                                                   
for(i<10; i ++):
    print("Hallo Welt");
#+end_src                                                                                                                                                                                    

#+RESULTS: HelloWorld

#+RESULTS:


Die Anweisung wird solange ausgeführt, bis die Bedingung falsch wird.

** Aufgabe 2.3

Schreibe eine Anweisung, die beschreibt:
Solange Du Hunger hast, läufst Du zum Supermarkt und kaufst ein Stück Käse. Das Stück Käse isst Du auf dem Weg nach Hause.

** Aufgabe 2.4

Wandele die Aufgabe aus 2.3 so ab, dass die Anweisung so lange ausgeführt wird, wie das Hungergefühl vorhanden ist und Geld in der Hosentasche ist. Trifft eine von beiden Bedingungen nicht mehr zu, soll der Vorgang abgebrochen werden.

** For-Schleife

Der Code enthält die Anweisung 5 Stück Käse in den Einkaufswagen zu legen.

#+name: While
#+begin_example  
For (i=0; i<5; i++)
    Lege ein Stück Käse in den Einkaufswagen
#+end_example    

i ist eine Variable, die mit i=0 auf 0 gesetzt wird. Die Anweisung wird so lange ausgeführt, so lange der Ausdruck i<5 wahr ist. Bei jedem Durchlauf wird i um eins erhöht (i++). Anzumerken ist, wenn ein "Anweisungsblock" nur aus einer Anweisung besteht, kann die geschweifte Klammer weggelassen werden.

** Aufgabe 2.5

Wandele das Bespiel "For-Schleife" so ab, dass die For-Anweisung durch eine While-Schleife ersetzt wird.

** Aufgabe 2.6

Schreibe ein Programm, das die Arbeitsweise von Modulo erklärt.

* Besonderheiten bei print

Wir geben in der Python-Konsole ein:

#+name: print
#+begin_src python
server_name = "fbs01"
print("Server Name: %s" % (server_name)) 
#+end_src

und bekommen die Ausgabe:

#+RESULTS: 
Server Name: fbs01 

Das Zeichen "%s" funktioniert hier als Platzhalter für die Variable server_name die nach dem " kommt. Der Inhalt der Variable wird an die Stelle des %s-Zeichens eingesetzt.

Um die Länge des Strings zu bekommen, geben wir ein:

** Länge des Inhalts einer Variable

#+name: print
#+begin_src python
len(server_name)
#+end_src

#RESULTS:
5

** Variable zusammenführen

#+name: print
#+begin_src python
server_name = "fbs01"
Ort = "Raum 13"
print(server_name+" ist in "+Ort+"!")
#+end_src

#RESULTS:
fbs01 ist in Raum 13! 

Und:

#+name: print
#+begin_src python
server_name = "fbs01"
Ort = "Raum 13"
Ausgabe = join(server_name, "ist in", Ort,"!")
print Ausgabe
#+end_src






* Debugging?

Der Begriff wird der Amerikanerin http://de.wikipedia.org/wiki/Grace_Hopper[Grace Hopper] zugeschrieben. Grace Hopper fand 1947 eine Motte, die zwischen die Kontakte eines Relais gekomemn war und klebte die Motte in das Logbuch des Computer Mark II. 

image:images/motte.jpg[height=250]

und vermerkte dazu: http://de.wikipedia.org/wiki/Grace_Hopper[„First actual case of bug being found.“ („Das erste Mal, dass tatsächlich ein Bug gefunden wurde.“]).

Das Fehler als Bug bezeichnet wurden, war wohl damals bereits üblich, sonst wäre der Eintrag schwer verständich. Insofern ist es nicht so, dass Grace Hopper den Begriff einführte aber sehr wohl prägte und populär machte.

Debuggung bedeutet Fehler zu finden.



* Cleanup							   :noexport:
#+name: cleanitallup
#+begin_src R 
  rm(list=ls())
#+end_src

#+RESULTS: cleanitallup
#+begin_example
> rm(list=ls())
> 
#+end_example

