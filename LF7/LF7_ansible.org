# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Installation von Ansible
#+AUTHOR:    Jörg Reuter
#+EMAIL:     joerg@reuter.sc
#+DATE:      

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup
#+SETUPFILE: ../workshopPreamble.org

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (load-file "../setupEnvironment.el")
#+end_src

* Installation

Das Programm Ansible ist in Python programmiert. Daher müssen wir Python auch installieren.

#+name: python_install
#+begin_src bash
apt update
apt -y install git python python-dev python-pip openssl python-software-properties software-properties-common
sudo apt-add-repository ppa:ansible/ansible
apt update
apt -y install git python python-dev python-pip openssl ansible
apt -y dist-upgrade
#+end_src

Mit dem folgenden  Befehl überprüfen wir die Installation:

#+name: ansible_version
#+begin_src bash
ansible --version
#+end_src

Als Ausgabe sollte erscheinen (oder höhere Version): 

#+name: ansible_version_ausgabe
#+begin_src bash
ansible 2.0.0.2
#+end_src

Die Version ist leider nicht mehr ganz aktuell. Daher installieren wir den Server von einer anderen Quelle:

#+name: ansible_ppa
#+begin_src bash
sudo apt-add-repository ppa:ansible/ansible
apt update
apt dist-upgrade
#+end_src

Jetzt sollte der Befehl

#+name: ansible_ansible_neu
#+begin_src bash 
ansible --version
#+end_src

die Version 2.3.0.0 oder höher ausgeben. Darunter erscheint der Pfad zur Konfigurationsdatei. Diese öffnen wir mit einem Texteditor:


#+name: ansible_ansible_cfg
#+begin_src bash 
vim /etc/ansible/ansible.cfg
#+end_src

In der Datei entfernen wir das Kommentarzeichen vor zwei Zeilen:

#+name: ansible_ansible_aenderung
#+begin_src bash
inventory      = /etc/ansible/hosts
sudo_user      = root
#+end_src

Beide Zeilen sind im [defaults]-Bereich. Danach speichern wir die Datei ab.

Ansible hat keinen Hintergrundprozess und braucht daher nicht neu gestartet zu werden.

Wir wechseln in den Ordner /etc/ansible (den Pfad hatten wir eben in der Konfigurationsdatei aktiviert) und sichern dort die hosts-Datei:

#+name: ansible_ansible_mv
#+begin_src bash 
mv hosts host.backup
#+end_src

Wir öffnen die Datei hosts (eine leere Datei) und tragen folgendes ein:


#+name: ansible_host
#+begin_src bash
[local]
localhost

[ubuntu]
Ubuntu.node

[centos]
Centos.node
#+end_src

Für beide Server tragen wir die IP-Adresse in die Datei /etc/hosts ein.

Wir führen möglichst alle Programme und Server mit Benutzern aus, die möglichst wenig Rechte auf dem Server haben. Daher legen wir einen neuen Benutzer an:


#+name: ansible_adduser
#+begin_src bash 
adduser ansible
#+end_src

Wir müssen den Benutzer ansible jetzt noch in die Gruppe der sudoers einfügen. Dies ermöglicht ansible privilegierte Befehle zu starten. Wir müssen darauf achten, dass ansible dafür kein Passwort braucht:

Mit dem Befehl 

#+name: visudo
#+begin_src bash 
visudo
#+end_src

öffnen wir die Konfiguratiosdatei um ansible temporären Systemzugriff zu gewähren und fügen unterhalb der Zeile 


#+name: user_konfig
#+begin_src bash 
root    ALL=(ALL:ALL) ALL
ansible ALL=(ALL) NOPASSWD: ALL
#+end_src

ein.

Das Anlegen des Benutzers und die Vergabe des Passworts müssen wir auf jedem System durchführen.

Um das Problemlose verwalten der Nodes zu ermöglichen, richten wir für ssh eine Key-basierte Anmeldung ein:

#+name: ssh-keygen
#+begin_src bash
su ansible -
ssh-keygen
#+end_src

Als nächstes kopieren wir die Schlüssel auf die Server:

#+name: ssh-copy
#+begin_src bash
ssh-copy-id ansible@Ubuntu.node
#+end_src

** Achtung vServer mit KeyAuth

Damit der Befehl ssh-copy-id z.B. bei DigitalOcean funktioniert, muss folgendes Workaround eingesetzt verwendet werden:

In der Datei  /etc/ssh/sshd_config muss die Zeile PasswordAuthentication no zu PasswordAuthentication yes verändert werden. Anschließend ist der Dienst mit 

#+name: sshd_config
#+begin_src bash
sudo systemctl restart sshd 
#+end_src

neu zu starten.

** SSH-Key lokal kopieren

Mit dem Befehl

#+name: ssh
#+begin_src bash
ssh 'ansible@54.154.150.210'
#+end_src

testen wir die Erfolgreiche Einrichtung. Es sollte jetzt möglich sein, ohne Passwort auf den anderen Computer zugriff zu erhalten.

Damit die Clients auf den Server zugreifen können, müssen wir die ssh-id auch auf unseren Server installieren:

#+name: ssh-copy-local
#+begin_src bash
ssh-copy-id ansible@localhost
#+end_src

-----------------------------------------------------
* Testumgebung

Wir gehen von 3 Servern zu testzwecken aus mit jeweils Ubuntu 16.04 installiert.

Wir möchten Ansible aus Sicherheitsgründen nicht unter root laufen lassen. Wir legen daher auf jeder Maschine einen User (Name beliebig) und in seinem Home-Verzeichnis den Ordner playbooks an und setzen die Berechtigungen noch richtig.:

adduser ansible
cd /home/ansible
mkdir playbooks
chown ansible:ansible playbooks/

Wir gehen in das Verzeichnis /etc/ansible und schauen uns den Inhalt an:

cd /etc/ansible
ll

** Hosts-Datei

Wir verschieben die Hosts-Datei und legen eine neue an:

#+begin_src
mv hosts hosts.orig

vim hosts
#+end_src

#+begin_src
[local]
localhost

[apachehosts]
47.90.200.64

[gitserver]
47.90.204.43
#+end_src

Wir können uns alkle konfigurierten Systeme anzeigen lassen:

#+begin_src
ansible all --list-host
#+end_src

Wir konfigurieren das Key-Auth für ssh:

Wir speichern die Datei fbs.pem in den /root/.ssh-Ordner und passen die .ssh/config-Datei an (wenn nicht vorhanden, einfach anlegen):

#+begin_src
Host *
IdentityFile2 ./fbs.pem
Port 22
PreferredAuthentications publickey
Protocol 2
User root
#+end_src

Wir können jetzt alle Maschinen anpingen:

#+begin_src
ansible all -m ping
#+end_src

Oder bestimmte Gruppen:

#+begin_src
ansible gitserver -m ping
#+end_src

Solange die Ausgabe grün bleibt, ist alles ok.

#+begin_src
root@iZ0xie4k1y0gs0kk3lphsjZ:~/.ssh# ansible gitserver -m ping
47.90.204.43 | SUCCESS => {
    "changed": false,
    "failed": false,
    "ping": "pong"
}
#+end_src

Wir können eine bestimmte host-Datei mitgeben durch den Parameter -i:

#+begin_src
ansible 47.90.200.64 -i /home/user/hosts -m ping
#+end_src

Auch die ansible.cfg kann überschrieben werden: ansible überprüft automatisch das Verzeichnis indem ansible gestartet wird nach einer Datei mit dem Namen ansible.cfg und führte diese dann aus.

* Ansible auf der Konsole

Wir möchten wissen, welche python-Module auf den Servern der Gruppe 'gitserver' installiert sind. Das Anzeigend er aktuell installierten Pakete geschieht durch den Befehl

#+begin_src
dpkg-query -l|grep python
#+end_src

Mit dem Befehl

#+begin_src
ansible gitserver -m shell -a 'dpkg-query -l|grep python'
#+end_src

Der Befehl bedeutet, dass auf den Servern der Gruppe gitserver die Shell geöffnet wird und wir in der Shell den Befehl ausführen.

Wir können statt der Gruppe auch die IP oder den NAmen einzelner Server aus der hosts-Datei angeben.

* Aufgabe 

Schreibe einen Befehl, der auf den Servern der Gruppe 'webservers' mariadb-server und mariadb-client installiert. Der Befehl für die Konsole lautet: 

#+begin_src
apt -y install mariadb-client mariadb-server
#+end_src

Um wichtige Systemdaten abzufragen, gibt es den Befehl setup:


#+begin_src
ansible local -m setup|more
#+end_src


Wir können die Ausgaben auch in eine Datei kopieren:


#+begin_src
ansible localhost -m setup --tree /tmp/info
#+end_src

Um den Baum zu durchsuchen nach einem bestimmten Eintrag wie z.B. die IPv4-Adressen, könnten wir grep verwednen:

#+begin_src
ansible localhost -m setup --tree /tmp/info|grep ipv4
#+end_src

Das gibt aber nur die Zeile aus und nicht die gesuchten Informationen (die stehen ja in der geschweiften Klammer):

#+begin_src
root@iZ0xie4k1y0gs0kk3lphsjZ:~# ansible gitserver -m setup |grep ipv4
        "ansible_all_ipv4_addresses": [
        "ansible_default_ipv4": {
                "tx_checksum_ipv4": "off [fixed]",
            "ipv4": {
                "tx_checksum_ipv4": "off [fixed]",
            "ipv4": {
#+end_src

Deshalb verwednen wir den Filter-Befehl, der die Klammern mit ausgibt:

#+begin_src
root@iZ0xie4k1y0gs0kk3lphsjZ:~# ansible gitserver -m setup -a 'filter=*ipv4*'
47.90.204.43 | SUCCESS => {
    "ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "172.22.59.240"
        ],
        "ansible_default_ipv4": {
            "address": "172.22.59.240",
            "alias": "eth0",
            "broadcast": "172.22.63.255",
            "gateway": "172.22.63.253",
            "interface": "eth0",
            "macaddress": "00:16:3e:00:28:91",
            "mtu": 1500,
            "netmask": "255.255.240.0",
            "network": "172.22.48.0",
            "type": "ether"
        }
    },
    "changed": false,
    "failed": false
}
#+end_src

** Aufgabe

1.) Schreibe einen Befehl, der den verbauten Prozessor zurück gibt.
2.) Probiere folgende Befehle aus:

#+begin_src
ansible gitserver -m setup -a 'filter=ansible_architecture'
ansible gitserver -m setup -a 'filter=ansible_distribution'
ansible gitserver -m setup -a 'filter=ansible_distribution_version'
ansible gitserver -m setup -a 'filter=ansible_domain'
ansible gitserver -m setup -a 'filter=ansible_fqdn'
ansible gitserver -m setup -a 'filter=ansible_kernel'
ansible gitserver -m setup -a 'filter=ansible_memtotal_mb'
#+end_src

* Playbook

Für das Playbook müssen wir die Befehle besser aufabuen und flexibler gestalten. Wir installieren den browser lynx in einer Gruppe:

#+begin_src
ansible gitserver -m apt -a 'name=lynx  state=installed update_cache=true'
#+end_src

Wir sagen, wir verwenden die Vorlage (Modell) apt und sagen, das PAket soll den Status installed haben und die Metadaten der Pakete sollen aktuell sein. Wenn lynx nicht installiert ist, wird dies nachgeholt. Wenn es installiert ist, wird nichts gemacht.

Wir legen ein verzeichnis an mit der Bezeichnung playbooks:

#+begin_src
mkdir playbooks
cd playbooks
#+end_src

Wir legen ein File mit dem namen gitserver.yml an ,it folgendem Inhalt:

#+begin_src
- hosts: gitserver
  tasks:
  - name: Install Lynx in der Gruppe gitserver
    apt: name=lynx  state=installed update_cache=true
#+end_src

und führen die Datei aus:

#+begin_src
ansible-playbook gitserver.yml
#+end_src

* Variable

Variablen im Playbook. Variablen werden immer am Anfang definiert.

#+begin_src
- hosts: gitserver
  vars:
    control_server: 47.90.204.43
    web_root: /var/www/html
  tasks:
  - name: Install Lynx in der Gruppe gitserver
    apt: name=lynx  state=installed update_cache=true
#+end_src

* Include von Yaml-Dateien:


#+begin_src
- hosts: gitserver
  vars_files:
  - vars.yml
  vars:
    control_server: 47.90.204.43
    web_root: /var/www/html
  tasks:
  - name: Install Lynx in der Gruppe gitserver
    apt: name=lynx  state=installed update_cache=true

#+end_src









