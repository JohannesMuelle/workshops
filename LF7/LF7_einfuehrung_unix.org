# -*- eval: (save-excursion (org-babel-goto-named-src-block "workshopPreamble") (org-babel-execute-src-block)) -*-
#+TITLE:     Einführung in Unix
#+AUTHOR:    Jörg Reuter
#+EMAIL:     joerg@reuter.sc
#+DATE:

#+PROPERTY: exports both
#+EXCLUDE_TAGS: noexport mitsetup
#+SETUPFILE: ../workshopPreamble.org

#+name: workshopPreamble
#+begin_src emacs-lisp :exports none :results silent :tangle no
  (load-file "../setupEnvironment.el")
#+end_src

#+name: setupR
#+begin_src R :exports none :tangle no :results silent
  rm(list=ls())
  .First <- function() {
    options(width=70)
    options(useFancyQuotes=FALSE)
    options(show.signif.stars=FALSE)
    options(scipen = 10)
    options(digits = 3)
  }
#+end_src


* Einführung
** Vorbemerkung
Unix wurde Ende der 1960er Jahre entwickelt und weißt eine sehr grosse Vielfalt unterschiedlicher Richtungen auf die sich teils stark unterscheiden. Eine Übersicht der Unix-Entwicklung gibt es hier: https://upload.wikimedia.org/wikipedia/commons/7/77/Unix_history-simple.svg.

Wir werden in diesem Kurs einige grundlegende Eigenschaften von Unix entdecken, die prinzipiell unabhängig von der jeweilig eingesetzten Version sind. Um in jeder Umgebung ein System zu haben mit dem man ein wenig experimentieren kann, verwenden wir eine virtuellen Computer von DigitalOcean (http://digitalocean.com).

Es gibt sehr viele Distributionen, die oft einen speziellen Zweck erfüllen. Es gibt Distributionen für IoT, IT-Sec, alte Computer, Server, Videobearbeitung, Videostreaming, Musik unter Windows lauffähige Versionen etc. Für den Einsatz auf Servern ist es wichtig, sich eine Version herauszusuchen, die einen guten Support im Internet hat und weit verbreitet ist.
Es macht keinen großen Sinn, die Distributionen nach Vor- und Nachteilen aufzuteilen. Dafür ist das Angebot zu vielfältig. Ich werde hier nur die bedeutenden Distributionen, die Basis für viele andere Distributionen sind, kurz vorstellen. Ich werde als Unterscheidungsmerkmal den Paketmanager nehmen um zu zeigen wie die ersten Schritte in der jeweiligen Distribution aussehen.

Anders als bei Windows werden Programme meistens nicht auf einer Webseite gesucht, heruntergeladen und dann installiert. Es gibt bei Linuxsystemen ein Verzeichnis (Repository) aller üblichen Programme. Diese können dann über ein Systemprogramm installiert und mit Updates versorgt werden. Nur bei nicht "marktgängigen" Programmen ist eine manuelle Installation wie unter Windows notwendig.

Fast jede Distribution hat ein Repository, indem alle Programme zentral verzeichnet sind, die zur Verfügung stehen. Mit einem Systemprogramm kann dieses Verzeichnis (Datenbank) auf den Computer gespielt werden. Diese Datenbank enthät

- den Namen aller im Repository enthaltener Programme,
- eine kurze Beschreiung,
- die Versionsnummer
- die Abhängigkeiten
- Ort der Programmdateien im Internet (oder auf CD, USB-Stick etc.)
- und die Archtiktur (32- oder 64 Bit? ARM oder AMD/Intel).

Standardmäßig wird nach Aktualisierung des lokalen Repository-Verzeichnisses alle Pakete angezeigt die bereits installiert sind und für die Updates zur Verfügung stehen.
Es gibt zwei grosse Formate für die Paketbeschreibung:

- RPM
- Debian

Es ist nicht (ohne weiteres) möglich, die Paketformate zu mischen. Bei der Wahl der Distribution legt man sich automatisch auf das entsprechende Paketformat fest. Es gibt für alle Paketformate graphische und textbasierte Möglichkeiten der Installation, des Updates und des löschens von Programmen.

|-----------------------+-------------+------------------------------------------------------------|
| Name                  | Paketformat | weitere Informationen                                      |
| Fedora                | RPM         | https://de.wikipedia.org/wiki/Fedora_(Linux-Distribution)  |
| CentOS                | RPM         | https://de.wikipedia.org/wiki/CentOS                       |
| openSUSE              | RPM         | https://de.wikipedia.org/wiki/OpenSUSE                     |
| SUSE Linux Enterprise | RPM         | https://de.wikipedia.org/wiki/SUSE_Linux_Enterprise_Server |
| Red Hat               | RPM         | https://de.wikipedia.org/wiki/Red_Hat                      |
| Ubuntu                | Debian      | https://de.wikipedia.org/wiki/Ubuntu                       |
| Debian                | Debian      | https://de.wikipedia.org/wiki/Debian                       |
| Arch                  | pacman      | https://de.wikipedia.org/wiki/Arch_Linux                   |
| Salckware             | tarballs    | https://de.wikipedia.org/wiki/Slackware                    |
| Gentoo                | ebuild      | https://de.wikipedia.org/wiki/Gentoo_Linux                 |
|-----------------------+-------------+------------------------------------------------------------|

Slackware ist die älteste Distribution, Ubuntu die populärste.


* Ports

Port  Protocol  Dienst

22    SSH       OpenSSH

23    TELNET    telnetd

25    SMTP      PostFix, Sendmail

53    DNS       Bind, named

67    BOOTP     dnsmasq, dhcpd

80    HTTP      Apache

443   HTTPS     Apache

* Bekannte Serveranwendungen

- Apache
- MySQL
- Mono
- CUPS
- PostFix


* Umgang mit Debian-basierten Systemen

** Update in die lokale Datenbank

#+name: get_update
#+begin_src bash
apt update
#+end_src

** Updates einspielen

#+name: get_upgrade
#+begin_src bash
apt dist-upgrade
#+end_src

** Suchen nach Programmen

Wir möchten den Web-Server Apache installieren und wissen nicht, wie das Paket heißt. Also suchen wir nach dem Begriff "apache":

#+name: get_search
#+begin_src bash
apt-cache search apache
#+end_src

** Installation von Programmen

Wir finden heraus, dass das Paket "Apache2" heißt und installieren es:

#+name: get_install
#+begin_src bash
apt install apache2
#+end_src

** In welchem Verzeichnis liegt das Programm?

Nach der Installation möchten wir herausfinden, in welchem Verzeichnis das Programm installiert worden ist:

#+name: which
#+begin_src bash
which apache2
#+end_src

Und bekommen als Ergebniss das Verzeichnis "/usr/sbin/apache2".

** Verändere die Datei index.html
Verändere die Datei index.html im Verzeichnis /var/www/html. Überprüfe die Veränderungen im Browser.

** Lege zwei Verzeichnisse an
Wir legen zwei Verzeichnisse an, das erste heißt "geheim" und das zweite "oeffentlich":

#+name: Verzeichnisse
#+begin_src bash
mkdir /var/www/html/geheim
mkdir /var/www/html/oeffentlich
#+end_src

** Aufgabe
Lege in jedem der neuen Ordner eine Datei mit dem namen index.html an. Der Inahlt soll so gewählt sein, dass eine eindeutige Unterscheidung zwischen den zwei Ordnern möglich ist. Überprüfe, dass die Dateien entsprechend im Browser angezeigt werden.

** Verzeichnisschutz
Wir möchten ein verzeichnis mit Passwort schützen.

*** Passwort festlegen
Mit dem folgenden Befehl legen wir den Benutzer fbs an und geben ihm ein Passwort

#+name: htpasswd
#+begin_src bash
htpasswd -c /etc/apache2/.htpasswd fbs 
#+end_src

*** .htaccess anlegen
Wir legen im Ordner geheim eine Datei mit dem Namen .htaccess an:

#+name: htaccess
#+begin_src bash
AuthUserFile /etc/apache2/.htpasswd
AuthName "Bitte Passwort eingeben"
AuthType Basic
Require valid-user
#+end_src

** Aktivieren der Datei .htaccess
In der Datei /etc/apache2/apache2.conf suchen wir nach der Zeile "<Directory /var/www/>" und verändern in dem Block

#+name: None
#+begin_src bash
AllowOverride None
#+end_src

zu

#+name: All
#+begin_src bash
AllowOverride All
#+end_src

** Apache neu starten

Wir starten den Webserver neu:

#+name: restart
#+begin_src bash
service apache2 restart
#+end_src

** Testen

Zu testen öffnen wir http://x.x.x.x/geheim und es sollte eine Passwortabfrage angezeigt werden. Nach der Eingabe von fbs fbs sollten wir Zugriff auf das Verzeichnis erhalten.

* Benutzerverwaltung

** Neuen Benutzer anlegen

Wir möchten einen neuen User mit dem Namen fbs anlegen:

#+name: useradd
#+begin_src bash
useradd fbs
#+end_src

Wir schauen uns den Eibtrag in der Datei /etc/passwd an:

#+name: etcpasswd
#+begin_src bash
cat /etc/passwd
#+end_src

In der letzten Zeile sehen wir unseren neu angelegten User.

** Passwort ändern

Wir legen nun ein Passwort für den Benutzer fbs an:

#+name: passwd
#+begin_src bash
passwd fbs
#+end_src

Wir melden uns ab und mit dem neuen Benutzer an. Dann melden wir uns ab und wieder als root an.

** Sudo
Damit unser Benutzer fbs auch Administrationsrechte bekommt, muss der Benutzer in die Datei /etc/sudoers eingetragen werden:

#+name: sudo
#+begin_src bash
visudo
#+end_src

Wir sehen einmal die Zeile root, in der dem User root alle Rechte auf dem System eingeräumt werden. Wir könnten die Zeile kopieren und root in fbs umwandeln. Das ist aber ekin schöner Weg, weil wir die Datei eventuell oft Verändern müssen. Zwei zeilen darunter sehen wir die Gruppe sudo. Hier sind alle Personen, die der Gruppe anghören automatisch mit administrativen Rechten ausgestette.


** Aufgabe
Bitte installiere zusätzlich den Web-Server Nginx.

** Status eines Servers anzeigen
Nach der Installation von NginX überprüfen wir, ob der Server gestartet wurde:

#+name: status
#+begin_src bash
service nginx status
#+end_src

Normalerweise wird ein Server nach der Installation automatisch gestartet. Wir starten ihn manuell:

#+name: status
#+begin_src bash
service nginx start
#+end_src

* Aufgabe
Überprüfe, ob der Server Nginx jetzt gestartet wurde. 

** Fehlersuche

Um den Fehler zu finden, wechseln wir in das Verzeichnis /var/log:

#+name: var_log
#+begin_src bash
cd /var/log
#+end_src

*** Inhalt eines Verzeichnisses anzeigen 
In dem Verzeichnis sind Dateien in den die laufenden Programme Ihre Fehler schreiben und was sie gerade so machen. Wir schauen uns den Inhalt des Verzeichnisses an:

#+name: ls
#+begin_src bash
ls
#+end_src

In blau werden Verzeichnisse dargestellt. Also wechseln wir in das Verzeichnis "nginx" in der Vermutung, dass dort die Dateien liegen:

** Releative und absolute Adressierung

#+name: ls
#+begin_src bash
cd nginx
#+end_src

Dies nennt man relative Adresssierung da wir in das Verzeichnis wechseln in dessen Elternverzeichnis wir uns gerade befinden. Die relative Adressierung stimmt nur an dem Ort an dem wir uns gerade befinden. Die absolute Adressierung fängt immer mit einem "/" an. In unserem Fall würde der Befehl absolut dann heißen:

#+name: ls
#+begin_src bash
cd /var/log/nginx
#+end_src

Die absolute Angabe gilt von überall in dem System.

** Aufgabe

Schaue Dir den Inhalt des Verzeichnisses /var/log/nginx an. In welcher Datei  könnte die Fehlermeldung stehen?

** Ausgabe einer Datei

Mit dem Befehl cat könne wir eine Datei auf dem Bildschirm ausgeben:

#+name: cat
#+begin_src bash
cat error.log
#+end_src

** Aufgabe
Gebe bitte die Datei aus unter Benutzung der absoluten Pfadangabe.

** Server anhalten

Wir finden den Fehler:
#+name: bind
#+begin_src bash 
bind() to [::]:80 failed (98: Address already in use)
#+end_src

und erinnern uns, dass der Apache2 Werbserver den gleichen Port 80 verwendet wie Nginx. Also stoppen wir den Apache Webserver:

#+name: stop
#+begin_src bash 
service apache2 stop
#+end_src

** Aufgabe

Starte den Server Nginx erneut und überprüfe ob der Server läuft.

Es kann sein, dass die Installation des Servers Nginx durch den laufenden Apache2 gestört wurde. in disem Fall startet der Nginx nicht und muss gelöscht und neu installiert werden.

** Programm entfernen

#+name: remove
#+begin_src bash 
apt remove nginx
#+end_src

** Aufgabe

Bitte installiere nginx erneut. Achte darauf, dass der Apache2 Webserver nicht läuft.

** purge

Wir haben Programme entfernt mit dem Befehl remove. Remove lässt aber alle Konfigurationsdateien auf dem System. um eine Anwendung vollständig zu entfernen, wird der Befehl purge verwendet. Wir möchten den Apache2 vollständig vom System entfernen:

#+name: purge
#+begin_src bash 
apt purge apache2
#+end_src

Bevor wir y drücken schauen wir uns die Ausgabe kurz an. Wir sehen die Meldung "The following packages were automatically installed and are no longer required". Um die nicht mehr benötigten Pakete zu entfernen, geben wir ein:

#+name: autoremove
#+begin_src bash 
apt-get autoremove
#+end_src


** Installation von Paketen, die nicht im Repository enthalten sind

Wir möchten Dropbox installieren. 

*** Aufgabe 

Überprüfe bitte, ob sich Dropbox im Repository befindet.

*** Dateien herunterladen

Wir wechseln zuerst in unser Homeverzeichnis:

#+name: cd_
#+begin_src bash 
cd
#+end_src

Wir sehen auf der Seite https://www.dropbox.com/de/install-linux die aktuellen Versionen für verschiedene Distributionen. Wir laden die für unser System passende herunter. Bitte die aktuelle Verion anpassen.

#+name: wget
#+begin_src bash 
wget https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2015.10.28_amd64.deb
#+end_src

Wir sehen in der Ausgabe, dass die Datei "‘download?dl=packages%2Fubuntu%2Fdropbox_2015.10.28_amd64.deb" heißt.

*** Umbennen von Dateine

Mit dem befehl mv (move) könne wir Dateien umbennen. Um den Dateinamen nicht komplett ausschreiben zu müssen, verwenden wir die Ergänzungsfunktion der Shell. Wir schreiben dow und drücken die TAB-Taste. Der Dateiname sollte automatisch vollständig ausgeschrieben werden.

#+name: mv
#+begin_src bash 
mv download?dl=packages%2Fubuntu%2Fdropbox_2015.10.28_amd64.deb dropbox.deb
#+end_src

*** Aufagbe

Überprüfe bitte ob die Umbennung funktioniert hat.

*** Installation

Mit dem Befehl dpkg installieren wir das Paket: 

#+name: dpkg
#+begin_src bash 
dpkg -i dropbox.deb
#+end_src

Achtung: dpkg löst keine Abhängigkeiten von anderen Programmen auf! Es kann also sein, dass eine Fehlemeldung kommt mit der Auflistung benötigter anderer Programme. Man kann die manuelle Nachinstallation abkürzen, indem wir nach dem Befehl dpkg zu apt-get wechseln. Das System hat die benötigten Abhängigkeiten bereits registriert:

#+name: abhaengigkeit
#+begin_src bash 
apt update
apt -f upgrade
dpkg -i dropbox.deb
#+end_src

Spätestens jetzt sollte Dropbox laufen.

*** Aufagbe

In welchem Verzeichnis ist Dropbox installiert worden?

** Welche Pakete sind auf meinem System installiert?

Um alle Pakete zu sehen, die aktuell auf dem Computer laufen, wird ebenfalls dpkg verwendet:

#+name: installiert
#+begin_src bash 
dpkg --get-selections
#+end_src

Wir bekommen eine Liste mit allen installierten Programmen.

* Pipe

Wir möchten in der Liste der installierten Programme gezielt nach Dropbox schauen. Dies funktioniert mit dem Befehl Pipe "|". Pipe leitet die Ausgabe des Befehls nicht auf den Bildschirm sondern an einen anderen Befehl um. Dieser Befehl heißt grep. Grep such nach einem String und gibt bei Fund die ganze Zeile aus:

#+name: pipe
#+begin_src bash 
dpkg --get-selections|grep dropbox
#+end_src

Gelöscht werden kann Dropbox einfach mit apt-get remove bzw. purge. Beide Parameter kennt auch der Befehl dpkg, der allerdings keine Abhängigkeiten berücksichtigt.

* Die Standardverzeichnisse von Unix
Bei Unix ist die Verzeichnisstruktur streng vorgegeben. Viele Unix-Versionen halten sich auch mehr oder weniger daran. Es werden die Dateien entsprechend ihrer Art getrennt. So werden Anwenderdaten, Programme und Einstellungsdateien nicht wie bei manch anderen Betriebssystem durcheinander gewürfelt. Es wird weiterhin zwischen konstanten und veränderlichen Dateien unterschieden. Da Verzeichnisse Festplatten oder Partitionen von Festplatten darstellen können, ist so auch eine physische Trennung möglich. Dies erhöht die Systemsicherheit und vereinfacht die Datensicherung. Die Standardverzeichnisse unter Linux sind:

/

/bin

/dev

/etc

/home

/lib

/mnt

/opt

/proc

/root

/sbin

/tmp

/usr

/var

/cdrom

** /
Das ist das Haupt-, Root- oder Wurzelverzeichnis, das oberste Verzeichnis im kompletten Dateisystem. Hier sollten möglichst keine Dateien liegen, nur Verzeichnisse.

** /bin
Wichtige Befehle zur Systemverwaltung, die nicht spezifisch für den Superuser sind. Dies sind z.B. die uns schon bekannten Befehle date, reboot, halt, shutdown, pwd und ls. Programmdateien werden auch als binaries bezeichnet.

** /dev
Alle Peripheriegeräte (engl. devices), wie z. B. Drucker und Netzwerkkarte, sind über Gerätedateien ansprechbar. Sie dienen als Schnittstelle zu den Gerätetreibern und haben deshalb auch keinen Inhalt. Zum Beispiel wird bei einem Ausdruck einer Datei diese einfach in die Datei /dev/lp2 (Druckerdevice) kopiert.

Ein besonderes Device ist /dev/null. Das ist der Mülleimer von Unix. Wird eine Datei dorthin verschoben, ist sie weg. Die Datei /dev/fd0 stellt das erste Diskettenlaufwerk (floppy disk) dar. Es gibt noch weitere Dateien, die mit /dev/fd0 beginnen. Diese stellen das Diskettenlaufwerk mit unterschiedlichen Formaten dar. Um alle diese aufzulisten, können wir den Befehl ls /dev/fd0* eingeben. Der Stern dient als Joker und ersetzt eine beliebige Anzahl von beliebigen Zeichen.
Festplatten (hard disc) beginnen mit /dev/hd*.

SCSI-Festplatten: /dev/sd*.

(virtuelle) Konsolen ( Alt + F1 ... Alt + F6): /dev/tty*.

Serielle Schnittstellen: /dev/ttyS*.
DVD-Brenner, SATA-Geräte und USB-Geräte werden wie SCSI-Geräte angesprochen.
zur Übersicht

** /etc
Hier befinden sich die zentralen Konfigurationsdateien.
Ein Beispiel ist die Datei passwd. Diese enthält eine Liste aller Benutzer am System.
Die Konfigurationsdateien sind reine Textdateien (ASCII-Dateien) und können so einfach mit einem Texteditor verändert werden. Somit ist die Konfiguration von Unix-Rechnern ohne spezielle Software möglich. Weiterhin wird so eine Fernwartung unterstützt.

** /home
Hier befinden sich die Heimatverzeichnisse der "normalen" Benutzer. Jeder Benutzer unter Unix erhält einen Nutzernamen, ein Passwort und ein eigenes Verzeichnis. Dieses Verzeichnis wird als Unterverzeichnis in /home angelegt. Ein Nutzer mit dem Namen "schueler" würde also das Verzeichnis /home/schueler erhalten. Dort und nur dort kann der Nutzer Dateien und Verzeichnisse anlegen und verändern.

** /lib
Unter Unix werden, soweit wie es eben geht, gemeinsam verwendbare Bibliotheken (engl. shared libraries) eingesetzt. Solche shared libraries sparen eine Menge Systemressourcen, da viele Bestandteile von mehreren Prozessen aus gleichzeitig genutzt werden.

** /mnt
Hier werden bei vielen Unix-Versionen die Laufwerke, wie DVD und USB-Geräte, ein "montiert" (engl. mounten). Der Inhalt der Laufwerke erscheint dann unterhalb dieses Verzeichnisses.

** /opt
Hier werden optionale Zusatzprogramme, wie z. B. der WWW-Browser Firefox oder das Office-Paket OpenOffice, gespeichert.

** /proc
...ein virtuelles Dateisystem, über das Informationen über die Hardware ermittelt werden können. Außerdem wird hier jeder laufende Prozess (engl. process) dargestellt. Für jeden laufenden Prozess findet sich unterhalb von /proc ein Verzeichnis, dessen Name gleich seiner Prozessnummer (PID) ist. In diesem Unterverzeichnis sind keine Schreiboperationen möglich.

** /root
Dies ist das Heimatverzeichnis des Superusers. Es liegt nicht im Verzeichnis /home, da /home eventuell auf einer anderen Festplatte oder Partition liegen kann und so bei Wartungsarbeiten vielleicht nicht zur Verfügung steht.

** /sbin
Hier befinden sich ausführbare Dateien (engl. binaries) für den Systemstart und zur Systemverwaltung durch den Superuser.

** /tmp
Viele Programme brauchen regelmäßig temporären Speicherplatz. Da aber alle Benutzer Programme benutzen, haben alle Anwender auf dieses Verzeichnis auch schreibenden Zugriff. Bei Systemen mit vielen Anwendern sollte daher dieses Verzeichnis in eine extra Partition oder Festplatte gelegt werden. Dann kann das Schreiben in das Verzeichnis /tmp nicht mehr dazu führen, dass das gesamte System abstürzt, wenn dadurch der Gesamtspeicherplatz gegen 0 läuft. Ist genug Hauptspeicher (RAM) vorhanden, so kann man das Verzeichnis /tmp auch im Hauptspeicher anlegen.

** /usr
...für die Benutzer (engl. user) relevante Befehle und Anwendungsprogramme. Diese befinden sich in weiteren Unterverzeichnissen.

In /usr/bin befinden sich Dienstprogramme, die weniger häufig verwendet werden. Es ist eine eher willkürliche Entscheidung, welches Programm nun in /bin oder in /usr/bin zu finden ist. Abgeleitet ist diese Unterscheidung noch aus Zeiten, in denen zwischen kleinen, schnellen und teuren Platten und großen, langsamen und billigeren Festplatten unterschieden wurde.
/bin wurde dann auf einer schnellen Platte eingerichtet, während /usr/bin auf die langsamere Platte gelegt.

/usr/doc und /usr/man beinhalten Dokumentationen und Manual-Dateien für Hilfestellungen.

** /var
Bei Unix wird streng unterschieden zwischen Teilbereichen des gesamten Dateibaumes, der für alle Benutzer nur lesbar bzw. auch beschreibbar sein soll. Diejenigen Daten, die für alle Anwender nur lesbar sein sollen, befinden sich unterhalb von /usr.
Dort, wo der Anwender auch schreibenden Zugriff haben muss, wird eine Speicherung der variablen Daten in die Unterverzeichnisse von /var vorgenommen.
Beispiele sind die Speicherung von Druckaufträgen und Emails in das Verzeichnis /var/spool sowie die Protokollierung von An- und Abmeldevorgängen im Verzeichnis /var/log.
zur Übersicht

/cdromvar
Mountpoint für das DVD-Laufwerk. Bei anderen Linux-Versionen wird dazu auch das Verzeichnis /mnt/cdrom verwendet.
zur Übersicht

# Dienste

## Welche Dienste laufen auf meinem Server

Mit dem Befehl

#+name: systemctl
#+begin_src bash 
systemctl
#+end_src

werden alle Dienste aufgelistet, die gerade laufen.

# Apache2

Wir überprüfen ob der Dienst Apache2 läuft:

#+name: systemctl_grep1
#+begin_src bash 
systemctl|grep apache2
#+end_src

Es erfolgt eine leere Rückgabe und damit ist Apache2 nicht installiert. Das holen wir jetzt nach:

#+name: apache2
#+begin_src bash 
apt install apache2
#+end_src

Jetzt führen wir den befehl noch einmal aus:

#+name: systemctl_grep1
#+begin_src bash 
systemctl|grep apache2
#+end_src
Und siehe da, der Dienst wird angezeigt.

# Telent

Wir überprüfen ob der telnet-Server läuft:

#+name: systemctl_grep
#+begin_src bash 
systemctl|grep telnet
#+end_src

Es erfolgt eine leere Rückgabe und damit ist Telnet nicht installiert. Wir installieren jetzt den unsicheren Dienst telnet:

#+name: telnetd
#+begin_src bash 
apt install telnetd
#+end_src

Und führen den obigen Befehl erneut aus:

#+name: systemctl_grep
#+begin_src bash 
systemctl|grep telnet
#+end_src

Wir sehen den Dienst nicht. Das liegt daran, dass telnet über den Dienst 

